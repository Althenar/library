swagger: "2.0"

info:
  description: A simple API to track location of books
  title: AlthSoft Library tracker
  version: '1.0'
  contact:
    email: r@zxcv.pl
    url: http://zxcv.pl
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT

host: 'localhost:443'

basePath: /api

schemes:
- 'https'

produces:
- application/json

paths:
  /book:
    post:
      description: create a new book
      operationId: createBook
      summary: create a book
      tags:
      - book
      produces:
      - application/json
      parameters:
      - name: book
        in: body
        description: book object that needs to be added to the library
        required: true
        schema:
          $ref: '#/definitions/newBook'
      responses:
        '200':
          description: returns book json
          schema:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    get:
      description: show all books in the library
      operationId: getAllBooks
      summary: find all books
      tags:
      - book
      produces:
      - application/json
      responses:
        '200':
          description: array of books with additional information about borrow and shelf
          schema:
          type: array
          items:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /book/{id}:
    put:
      description: Update data of an existing book
      operationId: updateBook
      summary: Update a book
      tags:
      - book
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of a book that needs to be updated
        required: true
        type: integer
        format: int64
      - name: book
        in: body
        description: updated book object
        required: false
        schema:
          $ref: "#/definitions/book"
      responses:
        '200':
          description: returns updated book
          schema:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    delete:
      description: delete a single book
      operationId: removeBook
      summary: delete a book
      tags:
      - book
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of book to delete
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: success, book has been removed
          schema:
            $ref: "#/definitions/book"
        '400':
          description: invalid id supplied
        '404':
          description: book not found
        '405':
          description: validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    get:
      description: find book by id
      operationId: getBookById
      summary: search for a book with it's id
      tags:
      - book
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of a book to fetch
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: book response
          schema:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /book/borrowed:
    get:
      description: return all books that are currently borrowed
      operationId: getAllBooksBorrowed
      summary: find all borrowed books
      tags:
      - book
      produces:
      - application/json
      responses:
        '200':
          description: returns array of books currently borrowed
          schema:
          type: array
          items:
            $ref: '#/definitions/book'
      default:
        description: unexpected error
        schema:
          $ref: '#/definitions/errorModel'

  /book/in-queue:
    get:
      description: return all books that are currently placed in queues
      operationId: getAllBooksInQueue
      summary: find all books in queue
      tags:
      - book
      produces:
      - application/json
      responses:
        '200':
          description: returns array of books currently placed in queue
          schema:
          type: array
          items:
            $ref: '#/definitions/book'
      default:
        description: unexpected error
        schema:
          $ref: '#/definitions/errorModel'

  /book/title/{title}:
    get:
      description: returns books fetched by title
      operationId: getAllBooksByTitle
      summary: find books by title
      tags:
      - book
      produces:
      - application/json
      parameters:
      - name: title
        in: path
        description: Title of a book to get
        required: true
        type: string
      responses:
        '200':
          description: returns an array of books that match the title
          schema:
          type: array
          items:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /book/isbn/{isbn}:
    get:
      description: returns book with given isbn
      operationId: getBookByISBN
      summary: find a book with given isbn
      tags:
      - book
      produces:
      - application/json
      parameters:
      - name: isbn
        in: path
        description: isbn of a book to fetch
        required: true
        type: string
      responses:
        '200':
          description: returns a book with matched isbn
          schema:
            $ref: '#/definitions/bookcase'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /book/author/{name}:
    get:
      description: returns all books by author
      operationId: getAllBooksByAuthor
      summary: find books by author
      tags:
      - book
      produces:
      - application/json
      parameters:
      - name: name
        in: path
        description: name of book author
        required: true
        type: string
      responses:
        '200':
          description: returns array of books by given author
          schema:
          type: array
          items:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /book/borrowed-by/{name}:
    get:
      description: returns all books borrowed by user
      operationId: getAllBooksByUserThatBorrowed
      summary: find borrowed books of a user 
      tags:
      - book
      produces:
      - application/json
      parameters:
      - name: name
        in: path
        description: name of a user
        required: true
        type: string
      responses:
        '200':
          description: returns array of books borrowed by user
          schema:
          type: array
          items:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /book/shelf/{id}:
    get:
      description: returns all books on shelf
      operationId: getAllBooksFromShelf
      summary: find all books on shelf
      tags:
      - book
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of shelf
        required: true
        type: string
      responses:
        '200':
          description: returns array of books on the shelf
          schema:
          type: array
          items:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /book/bookcase/{id}:
    get:
      description: returns all books from bookcase
      operationId: getAllBooksFromBookcase
      summary: find all books in bookcase
      tags:
      - book
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of bookcase
        required: true
        type: string
      responses:
        '200':
          description: returns array of books from the bookcase
          schema:
          type: array
          items:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /bookcase:
    post:
      description: create a new bookcase
      operationId: createBookcase
      summary: create a bookcase
      tags:
      - bookcase
      produces:
      - application/json
      parameters:
      - name: bookcase
        in: body
        description: bookcase object that needs to be added to the library
        required: true
        schema:
          $ref: '#/definitions/newBookcase'
      responses:
        '200':
          description: returns new Bookcase
          schema:
            $ref: '#/definitions/bookcase'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    get:
      description: returns all bookcases in the library
      operationId: getAllBookcase
      summary: find all bookcases
      tags:
      - bookcase
      produces:
      - application/json
      responses:
        '200':
          description: returns an array with all bookcases
          schema:
          type: array
          items:
            $ref: '#/definitions/bookcase'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /bookcase/{id}:
    put:
      description: update an existing bookcase
      operationId: updateBookcase
      summary: update an existing bookcase
      tags:
      - bookcase
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of bookcase that needs to be updated
        required: true
        type: integer
        format: int64
      - in: body
        name: bookcase
        description: updated bookcase object
        required: false
        schema:
        $ref: "#/definitions/bookcase"
      responses:
        '200':
          description: returns updated bookcase json
          schema:
            $ref: '#/definitions/bookcase'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    get:
      description: find the bookcase by given id
      operationId: getBookcaseById
      summary: find bookcase by id
      tags:
      - bookcase
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of bookcase to fetch
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns bookcase json by it's id
          schema:
            $ref: '#/definitions/bookcase'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    delete:
      description: delete a single bookcase
      operationId: removeBookcase
      summary: delete a bookcase
      tags:
      - bookcase
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of bookcase to delete
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: success, bookcase has been removed
          schema:
            $ref: "#/definitions/bookcase"
        '400':
          description: Invalid id supplied
        '404':
          description: Bookcase not found
        '405':
          description: Validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /bookcase/search/{name}:
    get:
      description: find matching bookcases with given name
      operationId: getAllBookcaseByName
      summary: find all bookcases by name
      tags:
      - bookcase
      produces:
      - application/json
      parameters:
      - name: name
        in: path
        description: name of bookcase to search
        required: true
        type: string
      responses:
        '200':
          description: returns an array of all bookcases with matching name
          schema:
          type: array
          items:
            $ref: '#/definitions/bookcase'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /shelf:
    post:
      description: create a new shelf
      operationId: createShelf
      summary: create a new shelf
      tags:
      - shelf
      produces:
      - application/json
      parameters:
      - name: shelf
        in: body
        description: shelf object that needs to be added to the library
        required: true
        schema:
          $ref: '#/definitions/newShelf'
      responses:
        '200':
          description: returns new shelf json
          schema:
            $ref: '#/definitions/shelf'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    get:
      description: show all shelves in the library
      operationId: getAllShelf
      summary: find all shelves
      tags:
      - shelf
      produces:
      - application/json
      responses:
        '200':
          description: returns an array with all shelves
          schema:
          type: array
          items:
            $ref: '#/definitions/shelf'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /shelf/{id}:
    put:
      description: update an existing shelf
      operationId: updateShelf
      summary: update an existing shelf
      tags:
      - shelf
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of shelf that needs to be updated
        required: true
        type: integer
        format: int64
      - name: shelf
        in: body
        description: updated shelf object
        required: false
        schema:
          $ref: "#/definitions/shelf"
      responses:
        '200':
          description: returns updated shelf json
          schema:
            $ref: '#/definitions/shelf'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    delete:
      description: delete a single shelf by it's id
      operationId: removeShelf
      summary: delete a shelf 
      tags:
      - shelf
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of shelf to delete
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: success, shelf has been removed
          schema:
            $ref: "#/definitions/shelf"
        '400':
          description: Invalid id supplied
        '404':
          description: shelf not found
        '405':
          description: Validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    get:
      description: find shelf by id
      operationId: getShelfById
      summary: find shelf by id
      tags:
      - shelf
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of shelf
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns a shelf with given id
          schema:
            $ref: '#/definitions/shelf'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /shelf/row/{row}:
    get:
      description: find all shelves in a row
      operationId: getAllShelfByRow
      summary: find all shelves by row
      tags:
      - shelf
      produces:
      - application/json
      parameters:
      - name: row
        in: path
        description: row of shelves to fetch
        required: true
        schema:
          $ref: '#/definitions/shelf'
      responses:
        '200':
          description: returns an array with all shelves in a row
          schema:
          type: array
          items:
            $ref: '#/definitions/shelf'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /shelf/col/{col}:
    get:
      description: find all shelves by col
      operationId: getAllShelfByCol
      summary: find all shelves by col
      tags:
      - shelf
      produces:
      - application/json
      parameters:
      - name: col
        in: path
        description: Col of shelf to fetch
        required: true
        schema:
          $ref: '#/definitions/shelf'
      responses:
        '200':
          description: returns an array with all shelves in a col
          schema:
          type: array
          items:
            $ref: '#/definitions/shelf'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /shelf/row/{row}/col/{col}:
    get:
      description: Find a shelf in row and col
      operationId: getShelfByRowAndCol
      summary: Find shelf by row and col
      tags:
      - shelf
      produces:
      - application/json
      parameters:
      - name: row
        in: path
        description: row of shelf to fetch
        required: true
        schema:
          $ref: '#/definitions/shelf'
      - name: col
        in: path
        description: col of shelf to fetch
        required: true
        schema:
          $ref: '#/definitions/shelf'
      responses:
        '200':
          description: returns a shelf in a given row and col
          schema:
            $ref: '#/definitions/shelf'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /shelf/bookcase/{id}:
    get:
      description: find all shelves in bookcase
      operationId: getAllShelfFromBookcase
      summary: find all shelves in bookcase
      tags:
      - shelf
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of bookcase
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns an array of shelves in given bookcase
          schema:
          type: array
          items:
            $ref: '#/definitions/shelf'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /user:
    get:
      description: show all users of the library
      operationId: getAllUsers
      summary: find all users
      tags:
      - user
      produces:
      - application/json
      responses:
        '200':
          description: returns an array with all users in library
          schema:
          type: array
          items:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /user/profile:
    get:
      description: get data of currently logged in user 
      operationId: getUserByCurrentId
      summary: find current user
      tags:
      - user
      produces:
      - application/json
      responses:
        '200':
          description: returns a currently logged in user
          schema:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /user/profile/{id}:
    get:
      description: find user in library by it's id
      operationId: getUserById
      summary: find user by id
      tags:
      - user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of user to fetch
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns a user with given id
          schema:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    put:
      description: update an existing user
      operationId: updateUser
      summary: update an existing user
      tags:
      - user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of user that needs to be updated
        required: true
        type: integer
        format: int64
      - in: body
        name: user
        description: updated user object
        required: false
        schema:
          $ref: "#/definitions/user"
      responses:
        '200':
          description: returns updated user json
          schema:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    delete:
      description: delete a user
      operationId: removeUser
      summary: delete a user
      tags:
      - user
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of user to delete
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: success, user has been removed
          schema:
            $ref: "#/definitions/user"
        '400':
          description: invalid id supplied
        '404':
          description: user not found
        '405':
          description: validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /user/provider/{id}:
    get:
      description: find user by id from provider
      operationId: getUserByIdByProvider
      summary: find user by id from provider
      tags:
      - user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: provider-id of user to fetch
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns a user with given id from provider 
          schema:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /user/provider/name/{provider}:
    get:
      description: returns all users by provider
      operationId: getAllUserByProvider
      summary: find all users by provider
      tags:
      - user
      produces:
      - application/json
      parameters:
      - name: provider
        in: path
        description: login provider for users
        required: true
        type: string
      responses:
        '200':
          description: returns an array with all users from given provider
          schema:
          type: array
          items:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /user/provider/{id}/{provider}:
    get:
      description: find user by id from provider and name of provider
      operationId: getUserByProviderAndIdByProvider
      summary: find user by id from provider and name of provider
      tags:
      - user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id from provider of user to fetch
        required: true
        schema:
          $ref: '#/definitions/user'
      - name: provider
        in: path
        description: provider name of user to fetch
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        '200':
          description: returns user by given provider name and id from provider
          schema:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /user/name/{name}:
    get:
      description: returns all users matched with given name
      operationId: getAllUserByName
      summary: find all users with name
      tags:
      - user
      produces:
      - application/json
      parameters:
      - name: name
        in: path
        description: name to search for users
        required: true
        type: string
      responses:
        '200':
          description: returns an array of users with matching name
          schema:
          type: array
          items:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /user/role/{role}:
    get:
      description: returns all users with role
      operationId: getAllUserByProvider
      summary: find users with role
      tags:
      - user
      produces:
      - application/json
      parameters:
      - name: role
        in: path
        description: user's role
        required: true
        type: string
      responses:  
        '200':
          description: returns an array with all users with matching role
          schema:
          type: array
          items:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /borrow:
    get:
      description: show all borrow in the library
      operationId: getAllBorrow
      summary: find all borrow in the library
      tags:
      - borrow
      produces:
      - application/json
      responses:
        '200':
          description: returns an array with all borrows
          schema:
          type: array
          items:
            $ref: '#/definitions/borrow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    post:
        description: create a new borrow
        operationId: createBorrow
        summary: create new borrow
        tags:
        - borrow
        produces:
        - application/json
        parameters:
        - name: borow
          in: body
          description: new borrow object to add to library
          required: true
          schema:
            $ref: '#/definitions/newBorrow'
        responses:
          '200':
            description: returns new borrow json
            schema:
              $ref: '#/definitions/borrow'
          default:
            description: unexpected error
            schema:
              $ref: '#/definitions/errorModel'

  /borrow/return/{id_book}:
    delete:
      description: delete a borrow / return a book
      operationId: returnBook
      summary: delete a borrow
      tags:
      - borrow
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: id_book
        in: path
        description: id of book to return
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: success, borrow has been removed
          schema:
            $ref: "#/definitions/borrow"
        '400':
          description: invalid id supplied
        '404':
          description: borrow not found
        '405':
          description: validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /borrow/user:
    get:
      description: find borrows of current user
      operationId: getAllBorrowByCurrentUser
      summary: find borrows of current user
      tags:
      - borrow
      produces:
      - application/json
      responses:
        '200':
          description: returns an array with all borrows of current user
          schema:
          type: array
          items:
            $ref: '#/definitions/borrow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /borrow/{id}:
    get:
      description: find borrow by id
      operationId: getBorrowById
      summary: find borrow by id
      tags:
      - borrow
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of borrow to fetch
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns a borrow with given id
          schema:
            $ref: '#/definitions/borrow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /borrow/book/{id}:
    get:
      description: find borrow by id of book
      operationId: getBorrowByBookId
      summary: find borrow by id of book
      tags:
      - borrow
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of a book to fetch borrow
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns a borrow json of a given book
          schema:
            $ref: '#/definitions/borrow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /borrow/user/{id}:
    get:
      description: Find all borrows by id of user
      operationId: getAllBorrowByUserId
      summary: find all borrows by id of user
      tags:
      - borrow
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of user to fetch borrows
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns an array with all borrows of given user
          schema:
          type: array
          items:
            $ref: '#/definitions/borrow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /borrow/from/{date}:
    get:
      description: show all borrows from given date to now
      operationId: getAllBorrowFromDate
      summary: find all borrowed books in the library from some date
      tags:
      - borrow
      produces:
      - application/json
      parameters:
      - name: date
        in: path
        description: any date from the past
        required: true
        type: string
        format: date-time
      responses:
        '200':
          description: returns an array with all borrows from given date till today
          schema:
            $ref: '#/definitions/borrow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /borrow/{fromDate}/{tillDate}:
    get:
      description: find all borrow from specified dates
      operationId: getAllBorrowFromDateTillDate
      summary: find all borrow from specified dates
      tags:
      - borrow
      produces:
      - application/json
      parameters:
      - name: fromDate
        in: path
        description: date from when to fetch borrow
        required: true
        type: string
        format: date-time
      - name: tillDate
        in: path
        description: date till when to fetch borrow
        required: true
        type: string
        format: date-time
      responses:
        '200':
          description: returns an array of borrows from between specified dates
          schema:
          type: array
          items:
            $ref: '#/definitions/borrow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /borrow/book/title/{title}:
    get:
      description: find all borrow by matching book title
      operationId: getAllBorrowByBookTitle
      summary: find all borrow with matching book title
      tags:
      - borrow
      produces:
      - application/json
      parameters:
      - name: title
        in: path
        description: title of book to look for
        required: true
        type: string
      responses:
        '200':
          description: returns an array of borrows with matching book titles
          schema:
          type: array
          items:
            $ref: '#/definitions/borrow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /borrow/user/name/{name}:
    get:
      description: find all borrow by matching username
      operationId: getAllBorrowByUserName
      summary: find all borrow with matching username
      tags:
      - borrow
      produces:
      - application/json
      parameters:
      - name: name
        in: path
        description: name of user to look for
        required: true
        type: string
      responses:
        '200':
          description: returns an array of borrows with matching username
          schema:
          type: array
          items:
            $ref: '#/definitions/borrow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /history:
    get:
      description: get all history from the library
      operationId: getAllHistory
      summary: find all saved history of borrowing books from the library
      tags:
      - history
      produces:
      - application/json
      responses:
        '200':
          description: returns an array with all saved history
          schema:
          type: array
          items:
            $ref: '#/definitions/history'
        default: 
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /history/user:
    get:
      description: get all borrow history of currently logged in user
      operationId: getAllHistoryByCurrentUser
      summary: find all borrows of current user
      tags:
      - history
      produces:
      - application/json
      responses:
        '200':
          description: returns an array with all saved history of current user
          schema: 
          type: array
          items:
            $ref: '#/definitions/history'
        default:
          description: unexpected error
          schema: 
            $ref: '#/definitions/errorModel'

  /history/{id}:
    get:
      description: get a history by it's id
      operationId: getHistoryById
      summary: find one history by id
      tags:
      - history
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of history to fetch
        required: true
        type: integer
        format: int64
      responses: 
        '200':
          description: returns a history object by given id
          schema:
            $ref: '#/definitions/history'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    delete:
      description: delete a history with it's id
      operationId: removeHistory
      summary: delete a history
      tags:
      - history
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of history
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: success, history has been removed
          schema:
            $ref: "#/definitions/history"
        '400':
          description: invalid id supplied
        '404':
          description: history not found
        '405':
          description: validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /history/book/{id}:
    get:
      description: get all history of some book by it's id
      operationId: getAllHistoryByBookId
      summary: get all history by id of a book
      tags:
      - history
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of book
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns an array with all borrow history of given book
          schema:
          type: array
          items: 
            $ref: '#/definitions/history'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /history/user/{id}:
    get:
      description: get all history of some user by it's id
      operationId: getAllHistoryByUserId
      summary: get all history by id of a user
      tags:
      - history
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns an array with all history of given user
          schema:
          type: array
          items: 
            $ref: '#/definitions/history'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /history/from/{date}:
    get:
      description: show all history from given date to now
      operationId: getAllHistoryFromDate
      summary: find all history from specified date to now
      tags:
      - history
      produces:
      - application/json
      parameters:
      - name: date
        in: path
        description: any date from the past
        required: true
        type: string
        format: date-time
      responses:
        '200':
          description: returns an array with all history from given date till today
          schema:
            $ref: '#/definitions/history'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /history/{fromDate}/{tillDate}:
    get:
      description: find all history from specified dates
      operationId: getAllHistoryFromDateTillDate
      summary: find all history from specified dates
      tags:
      - history
      produces:
      - application/json
      parameters:
      - name: fromDate
        in: path
        description: date from when to fetch history
        required: true
        type: string
        format: date-time
      - name: tillDate
        in: path
        description: date till when to fetch history
        required: true
        type: string
        format: date-time
      responses:
        '200':
          description: returns an array of history from between specified dates
          schema:
          type: array
          items:
            $ref: '#/definitions/history'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /history/book/title/{title}:
    get:
      description: find all history by matching book title
      operationId: getAllHistoryByBookTitle
      summary: find all history with matching book title
      tags:
      - history
      produces:
      - application/json
      parameters:
      - name: title
        in: path
        description: title of book to look for
        required: true
        type: string
      responses:
        '200':
          description: returns an array of history with matching book titles
          schema:
          type: array
          items:
            $ref: '#/definitions/history'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /history/user/name/{name}:
    get:
      description: find all history by matching username
      operationId: getAllHistoryByUserName
      summary: find all history with matching username
      tags:
      - history
      produces:
      - application/json
      parameters:
      - name: name
        in: path
        description: name of user to look for
        required: true
        type: string
      responses:
        '200':
          description: returns an array of history with matching username
          schema:
          type: array
          items:
            $ref: '#/definitions/history'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /history/older/{date}:
    delete:
      description: delete from history where return date is older than specified date
      operationId: removeAllHistoryOlderThan
      summary: delete from history if older than given date
      tags:
      - history
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: date
        in: path
        description: date from the past
        required: true
        type: string
        format: date-time
      responses:
        '200':
          description: success, all history older than specified date have been removed
          schema:
            $ref: "#/definitions/history"
        '400':
          description: invalid id supplied
        '404':
          description: history not found
        '405':
          description: validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /queue:
    get:
      description: get all existing queues from the library
      operationId: getAllQueue
      summary: get all queues from library
      tags:
      - queue
      produces:
      - application/json
      responses:
        '200':
          description: returns an array with all queues in library
          schema:
          type: array
          items: 
            $ref: '#/definitions/queue'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    post:
      description: create a new queue
      operationId: createQueue
      summary: create a queue
      tags:
      - queue
      produces:
      - application/json
      parameters:
      - name: queue
        in: body
        description: queue object that needs to be added to the library
        required: true
        schema:
          $ref: '#/definitions/newQueue'
      responses:
        '200':
          description: returns new queue json
          schema:
            $ref: '#/definitions/queue'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /queue/user:
    get:
      description: get all queues of currently logged in user
      operationId: getAllQueueByCurrentUser
      summary: get all queues of current user
      tags:
      - queue
      produces:
      - application/json
      responses:
        '200':
          description: returns an array with queue of currently loged in user
          schema:
          type: array
          items:
            $ref: '#/definitions/queue'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /queue/user/{id}:
    get:
      description: get all queues of user with specified id
      operationId: getAllQueueByUserId
      summary: get all queues of user with given id
      tags:
      - queue
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of a user
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns an array with queue of some user
          schema:
          type: array
          items:
            $ref: '#/definitions/queue'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /queue/book/{id}:
    get:
      description: get all queues of book with specified id
      operationId: getAllQueueByBookId
      summary: get all queues of book with given id
      tags:
      - queue
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of a book
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns an array with queue of some book
          schema:
          type: array
          items:
            $ref: '#/definitions/queue'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /queue/user/{id_user}/position/{position}:
    get:
      description: get queue with specified user id and position
      operationId: getAllQueueByIdUserAndPosition
      summary: get queue of user at specified position
      tags:
      - queue
      produces:
      - application/json
      parameters:
      - name: id_user
        in: path
        description: id of a user
        required: true
        type: integer
        format: int64
      - name: position
        in: path
        description: position in queue
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns queue object of user at specified position
          schema:
            $ref: '#/definitions/queue'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /queue/user/{id_user}/book/{id_book}:
    get:
      description: get queue with specified user id and book
      operationId: getAllQueueByIdUserAndIdBook
      summary: get queue with user and book id
      tags:
      - queue
      produces:
      - application/json
      parameters:
      - name: id_user
        in: path
        description: id of a user
        required: true
        type: integer
        format: int64
      - name: id_book
        in: path
        description: id of a book
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: returns queue object of user with specified book
          schema:
            $ref: '#/definitions/queue'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /queue/{id}:
    put:
      description: Update data of an existing queue
      operationId: updateQueue
      summary: Update a queue
      tags:
      - queue
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of a queue that needs to be updated
        required: true
        type: integer
        format: int64
      - name: queue
        in: body
        description: updated queue object
        required: false
        schema:
          $ref: "#/definitions/queue"
      responses:
        '200':
          description: returns updated queue
          schema:
            $ref: '#/definitions/queue'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

    delete:
      description: delete a queue with it's id
      operationId: removeQueue
      summary: delete a queue
      tags:
      - queue
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of queue
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: success, queue has been removed
          schema:
            $ref: "#/definitions/queue"
        '400':
          description: invalid id supplied
        '404':
          description: queue not found
        '405':
          description: validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'


definitions:
  book:
    type: object
    required:
    - isbn
    properties:
      id:
        type: integer
        format: int64
        example: 2
      isbn:
        type: string
        example: '830211124'
      author:
        type: string
        example: 'Example Author'
      title:
        type: string
        example: 'Example Title'
      id_shelf:
        type: integer
        format: int64
        example: 3
      borrowed:
        type: string
        enum:
        - true
        - false
        example: false
      in-queue:
        type: string
        enum:
        - true
        - false
        example: false

  newBook:
    type: object
    required:
    - id_shelf
    - isbn
    properties:
      id_shelf:
        type: integer
        format: int64
        example: 2
      isbn:
        type: string
        example: '830211124'
      author:
        type: string
        example: 'Example Author'
      title:
        type: string
        example: 'Example Title'

  errorModel:
    type: object
    required:
    - code
    - message
    properties:
      code:
        type: integer
        format: int32
        example: 404
      message:
        type: string
        example: '404 - Not Found'

  shelf:
    type: object
    required:
    - id
    - row
    - col
    - id_bookcase
    properties:
      id:
        type: integer
        format: int64
        example: 3
      row:
        type: integer
        format: int
        example: 2
      col:
        type: integer
        format: int
        example: 2
      id_bookcase:
        type: integer
        format: int64
        example: 1

  newShelf:
    type: object
    required:
    - id_bookcase
    - row
    - col
    properties:
      id_bookcase:
        type: integer
        format: int64
        example: 2
      row:
        type: integer
        format: int
        example: 2
      col:
        type: integer
        format: int
        example: 2

  bookcase:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: integer
        format: int64
        example: 3
      name:
        type: string
        example: 'Example Name'

  newBookcase:
    type: object
    required:
    - name
    properties:
      name:
        type: string
        example: 'Example Name'

  user:
    type: object
    required:
    - name
    properties:
      id:
        type: integer
        format: int64
        example: 3
      name:
        type: string
        example: 'Example Name'
      provider:
        type: string
        example: 'Example Provider'
      idByProvider:
        type: string
        example: 'ExampleIdByProvider'
      role:
        type: string
        format:
        - 'admin'
        - 'user'
        example: 'user'

  borrow:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      borrowDate:
        type: string
        format: date-time
        example: '2018-10-10'
      id_user:
        type: integer
        format: int64
        example: 25
      id_book:
        type: integer
        format: int64
        example: 25

  newBorrow:
    type: object
    required:
      - id_user
      - id_book
    properties:
      borrowDate:
        type: string
        format: date-time
        example: '2018-10-10'
      id_user:
        type: integer
        format: int64
        example: 25
      id_book:
        type: integer
        format: int64
        example: 25

  queue:
    type: object
    required:
      - id_user
      - position
    properties:
      id:
        type: integer
        format: int64
        example: 1
      position:
        type: integer
        format: int64
        example: 5
      id_user:
        type: integer
        format: int64
        example: 25
      id_book:
        type: integer
        format: int64
        example: 25

  newQueue:
    type: object
    required:
      - id_user
      - position
    properties:
      position:
        type: integer
        format: int64
        example: null
      id_user:
        type: integer
        format: int64
        example: 25
      id_book:
        type: integer
        format: int64
        example: 25

  history:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 2
      borrowDate:
        type: string
        format: date-time
        example: '2018-10-10'
      returnDate:
        type: string
        format: date-time
        example: '2018-10-12'
      id_user:
        type: integer
        format: int64
        example: 25
      id_book:
        type: integer
        format: int64
        example: 25

externalDocs:
  description: Github
  url: https://github.com/Althenar/library